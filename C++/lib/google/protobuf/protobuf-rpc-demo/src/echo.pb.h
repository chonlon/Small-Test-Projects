// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: echo.proto

#ifndef PROTOBUF_echo_2eproto__INCLUDED
#define PROTOBUF_echo_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace echo {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_echo_2eproto();
void protobuf_AssignDesc_echo_2eproto();
void protobuf_ShutdownFile_echo_2eproto();

class EchoRequest;
class EchoResponse;
class A;
class B;
class B_HeHeB;

// ===================================================================

class EchoRequest : public ::google::protobuf::Message {
 public:
  EchoRequest();
  virtual ~EchoRequest();

  EchoRequest(const EchoRequest& from);

  inline EchoRequest& operator=(const EchoRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EchoRequest& default_instance();

  void Swap(EchoRequest* other);

  // implements Message ----------------------------------------------

  EchoRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EchoRequest& from);
  void MergeFrom(const EchoRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string msg = 1;
  inline bool has_msg() const;
  inline void clear_msg();
  static const int kMsgFieldNumber = 1;
  inline const ::std::string& msg() const;
  inline void set_msg(const ::std::string& value);
  inline void set_msg(const char* value);
  inline void set_msg(const char* value, size_t size);
  inline ::std::string* mutable_msg();
  inline ::std::string* release_msg();
  inline void set_allocated_msg(::std::string* msg);

  // @@protoc_insertion_point(class_scope:echo.EchoRequest)
 private:
  inline void set_has_msg();
  inline void clear_has_msg();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* msg_;
  friend void  protobuf_AddDesc_echo_2eproto();
  friend void protobuf_AssignDesc_echo_2eproto();
  friend void protobuf_ShutdownFile_echo_2eproto();

  void InitAsDefaultInstance();
  static EchoRequest* default_instance_;
};
// -------------------------------------------------------------------

class EchoResponse : public ::google::protobuf::Message {
 public:
  EchoResponse();
  virtual ~EchoResponse();

  EchoResponse(const EchoResponse& from);

  inline EchoResponse& operator=(const EchoResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EchoResponse& default_instance();

  void Swap(EchoResponse* other);

  // implements Message ----------------------------------------------

  EchoResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EchoResponse& from);
  void MergeFrom(const EchoResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string msg = 2;
  inline bool has_msg() const;
  inline void clear_msg();
  static const int kMsgFieldNumber = 2;
  inline const ::std::string& msg() const;
  inline void set_msg(const ::std::string& value);
  inline void set_msg(const char* value);
  inline void set_msg(const char* value, size_t size);
  inline ::std::string* mutable_msg();
  inline ::std::string* release_msg();
  inline void set_allocated_msg(::std::string* msg);

  // @@protoc_insertion_point(class_scope:echo.EchoResponse)
 private:
  inline void set_has_msg();
  inline void clear_has_msg();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* msg_;
  friend void  protobuf_AddDesc_echo_2eproto();
  friend void protobuf_AssignDesc_echo_2eproto();
  friend void protobuf_ShutdownFile_echo_2eproto();

  void InitAsDefaultInstance();
  static EchoResponse* default_instance_;
};
// -------------------------------------------------------------------

class A : public ::google::protobuf::Message {
 public:
  A();
  virtual ~A();

  A(const A& from);

  inline A& operator=(const A& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const A& default_instance();

  void Swap(A* other);

  // implements Message ----------------------------------------------

  A* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const A& from);
  void MergeFrom(const A& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 a = 1;
  inline bool has_a() const;
  inline void clear_a();
  static const int kAFieldNumber = 1;
  inline ::google::protobuf::int32 a() const;
  inline void set_a(::google::protobuf::int32 value);

  // repeated int32 urls = 2;
  inline int urls_size() const;
  inline void clear_urls();
  static const int kUrlsFieldNumber = 2;
  inline ::google::protobuf::int32 urls(int index) const;
  inline void set_urls(int index, ::google::protobuf::int32 value);
  inline void add_urls(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      urls() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_urls();

  // optional int32 id = 3;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 3;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:echo.A)
 private:
  inline void set_has_a();
  inline void clear_has_a();
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > urls_;
  ::google::protobuf::int32 a_;
  ::google::protobuf::int32 id_;
  friend void  protobuf_AddDesc_echo_2eproto();
  friend void protobuf_AssignDesc_echo_2eproto();
  friend void protobuf_ShutdownFile_echo_2eproto();

  void InitAsDefaultInstance();
  static A* default_instance_;
};
// -------------------------------------------------------------------

class B_HeHeB : public ::google::protobuf::Message {
 public:
  B_HeHeB();
  virtual ~B_HeHeB();

  B_HeHeB(const B_HeHeB& from);

  inline B_HeHeB& operator=(const B_HeHeB& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const B_HeHeB& default_instance();

  void Swap(B_HeHeB* other);

  // implements Message ----------------------------------------------

  B_HeHeB* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const B_HeHeB& from);
  void MergeFrom(const B_HeHeB& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 urls = 1;
  inline int urls_size() const;
  inline void clear_urls();
  static const int kUrlsFieldNumber = 1;
  inline ::google::protobuf::int32 urls(int index) const;
  inline void set_urls(int index, ::google::protobuf::int32 value);
  inline void add_urls(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      urls() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_urls();

  // @@protoc_insertion_point(class_scope:echo.B.HeHeB)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > urls_;
  friend void  protobuf_AddDesc_echo_2eproto();
  friend void protobuf_AssignDesc_echo_2eproto();
  friend void protobuf_ShutdownFile_echo_2eproto();

  void InitAsDefaultInstance();
  static B_HeHeB* default_instance_;
};
// -------------------------------------------------------------------

class B : public ::google::protobuf::Message {
 public:
  B();
  virtual ~B();

  B(const B& from);

  inline B& operator=(const B& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const B& default_instance();

  void Swap(B* other);

  // implements Message ----------------------------------------------

  B* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const B& from);
  void MergeFrom(const B& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef B_HeHeB HeHeB;

  // accessors -------------------------------------------------------

  // optional int32 b = 1;
  inline bool has_b() const;
  inline void clear_b();
  static const int kBFieldNumber = 1;
  inline ::google::protobuf::int32 b() const;
  inline void set_b(::google::protobuf::int32 value);

  // optional .echo.B.HeHeB hehe_a = 2;
  inline bool has_hehe_a() const;
  inline void clear_hehe_a();
  static const int kHeheAFieldNumber = 2;
  inline const ::echo::B_HeHeB& hehe_a() const;
  inline ::echo::B_HeHeB* mutable_hehe_a();
  inline ::echo::B_HeHeB* release_hehe_a();
  inline void set_allocated_hehe_a(::echo::B_HeHeB* hehe_a);

  // optional string what = 3;
  inline bool has_what() const;
  inline void clear_what();
  static const int kWhatFieldNumber = 3;
  inline const ::std::string& what() const;
  inline void set_what(const ::std::string& value);
  inline void set_what(const char* value);
  inline void set_what(const char* value, size_t size);
  inline ::std::string* mutable_what();
  inline ::std::string* release_what();
  inline void set_allocated_what(::std::string* what);

  // @@protoc_insertion_point(class_scope:echo.B)
 private:
  inline void set_has_b();
  inline void clear_has_b();
  inline void set_has_hehe_a();
  inline void clear_has_hehe_a();
  inline void set_has_what();
  inline void clear_has_what();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::echo::B_HeHeB* hehe_a_;
  ::std::string* what_;
  ::google::protobuf::int32 b_;
  friend void  protobuf_AddDesc_echo_2eproto();
  friend void protobuf_AssignDesc_echo_2eproto();
  friend void protobuf_ShutdownFile_echo_2eproto();

  void InitAsDefaultInstance();
  static B* default_instance_;
};
// ===================================================================

class EchoService_Stub;

class EchoService : public ::google::protobuf::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline EchoService() {};
 public:
  virtual ~EchoService();

  typedef EchoService_Stub Stub;

  static const ::google::protobuf::ServiceDescriptor* descriptor();

  virtual void Echo(::google::protobuf::RpcController* controller,
                       const ::echo::EchoRequest* request,
                       ::echo::EchoResponse* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::google::protobuf::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::google::protobuf::MethodDescriptor* method,
                  ::google::protobuf::RpcController* controller,
                  const ::google::protobuf::Message* request,
                  ::google::protobuf::Message* response,
                  ::google::protobuf::Closure* done);
  const ::google::protobuf::Message& GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const;
  const ::google::protobuf::Message& GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(EchoService);
};

class EchoService_Stub : public EchoService {
 public:
  EchoService_Stub(::google::protobuf::RpcChannel* channel);
  EchoService_Stub(::google::protobuf::RpcChannel* channel,
                   ::google::protobuf::Service::ChannelOwnership ownership);
  ~EchoService_Stub();

  inline ::google::protobuf::RpcChannel* channel() { return channel_; }

  // implements EchoService ------------------------------------------

  void Echo(::google::protobuf::RpcController* controller,
                       const ::echo::EchoRequest* request,
                       ::echo::EchoResponse* response,
                       ::google::protobuf::Closure* done);
 private:
  ::google::protobuf::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(EchoService_Stub);
};


// ===================================================================


// ===================================================================

// EchoRequest

// required string msg = 1;
inline bool EchoRequest::has_msg() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EchoRequest::set_has_msg() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EchoRequest::clear_has_msg() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EchoRequest::clear_msg() {
  if (msg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    msg_->clear();
  }
  clear_has_msg();
}
inline const ::std::string& EchoRequest::msg() const {
  // @@protoc_insertion_point(field_get:echo.EchoRequest.msg)
  return *msg_;
}
inline void EchoRequest::set_msg(const ::std::string& value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
  // @@protoc_insertion_point(field_set:echo.EchoRequest.msg)
}
inline void EchoRequest::set_msg(const char* value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
  // @@protoc_insertion_point(field_set_char:echo.EchoRequest.msg)
}
inline void EchoRequest::set_msg(const char* value, size_t size) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    msg_ = new ::std::string;
  }
  msg_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:echo.EchoRequest.msg)
}
inline ::std::string* EchoRequest::mutable_msg() {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    msg_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:echo.EchoRequest.msg)
  return msg_;
}
inline ::std::string* EchoRequest::release_msg() {
  clear_has_msg();
  if (msg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = msg_;
    msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void EchoRequest::set_allocated_msg(::std::string* msg) {
  if (msg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete msg_;
  }
  if (msg) {
    set_has_msg();
    msg_ = msg;
  } else {
    clear_has_msg();
    msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:echo.EchoRequest.msg)
}

// -------------------------------------------------------------------

// EchoResponse

// required string msg = 2;
inline bool EchoResponse::has_msg() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EchoResponse::set_has_msg() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EchoResponse::clear_has_msg() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EchoResponse::clear_msg() {
  if (msg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    msg_->clear();
  }
  clear_has_msg();
}
inline const ::std::string& EchoResponse::msg() const {
  // @@protoc_insertion_point(field_get:echo.EchoResponse.msg)
  return *msg_;
}
inline void EchoResponse::set_msg(const ::std::string& value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
  // @@protoc_insertion_point(field_set:echo.EchoResponse.msg)
}
inline void EchoResponse::set_msg(const char* value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
  // @@protoc_insertion_point(field_set_char:echo.EchoResponse.msg)
}
inline void EchoResponse::set_msg(const char* value, size_t size) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    msg_ = new ::std::string;
  }
  msg_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:echo.EchoResponse.msg)
}
inline ::std::string* EchoResponse::mutable_msg() {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    msg_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:echo.EchoResponse.msg)
  return msg_;
}
inline ::std::string* EchoResponse::release_msg() {
  clear_has_msg();
  if (msg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = msg_;
    msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void EchoResponse::set_allocated_msg(::std::string* msg) {
  if (msg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete msg_;
  }
  if (msg) {
    set_has_msg();
    msg_ = msg;
  } else {
    clear_has_msg();
    msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:echo.EchoResponse.msg)
}

// -------------------------------------------------------------------

// A

// optional int32 a = 1;
inline bool A::has_a() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void A::set_has_a() {
  _has_bits_[0] |= 0x00000001u;
}
inline void A::clear_has_a() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void A::clear_a() {
  a_ = 0;
  clear_has_a();
}
inline ::google::protobuf::int32 A::a() const {
  // @@protoc_insertion_point(field_get:echo.A.a)
  return a_;
}
inline void A::set_a(::google::protobuf::int32 value) {
  set_has_a();
  a_ = value;
  // @@protoc_insertion_point(field_set:echo.A.a)
}

// repeated int32 urls = 2;
inline int A::urls_size() const {
  return urls_.size();
}
inline void A::clear_urls() {
  urls_.Clear();
}
inline ::google::protobuf::int32 A::urls(int index) const {
  // @@protoc_insertion_point(field_get:echo.A.urls)
  return urls_.Get(index);
}
inline void A::set_urls(int index, ::google::protobuf::int32 value) {
  urls_.Set(index, value);
  // @@protoc_insertion_point(field_set:echo.A.urls)
}
inline void A::add_urls(::google::protobuf::int32 value) {
  urls_.Add(value);
  // @@protoc_insertion_point(field_add:echo.A.urls)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
A::urls() const {
  // @@protoc_insertion_point(field_list:echo.A.urls)
  return urls_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
A::mutable_urls() {
  // @@protoc_insertion_point(field_mutable_list:echo.A.urls)
  return &urls_;
}

// optional int32 id = 3;
inline bool A::has_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void A::set_has_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void A::clear_has_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void A::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 A::id() const {
  // @@protoc_insertion_point(field_get:echo.A.id)
  return id_;
}
inline void A::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:echo.A.id)
}

// -------------------------------------------------------------------

// B_HeHeB

// repeated int32 urls = 1;
inline int B_HeHeB::urls_size() const {
  return urls_.size();
}
inline void B_HeHeB::clear_urls() {
  urls_.Clear();
}
inline ::google::protobuf::int32 B_HeHeB::urls(int index) const {
  // @@protoc_insertion_point(field_get:echo.B.HeHeB.urls)
  return urls_.Get(index);
}
inline void B_HeHeB::set_urls(int index, ::google::protobuf::int32 value) {
  urls_.Set(index, value);
  // @@protoc_insertion_point(field_set:echo.B.HeHeB.urls)
}
inline void B_HeHeB::add_urls(::google::protobuf::int32 value) {
  urls_.Add(value);
  // @@protoc_insertion_point(field_add:echo.B.HeHeB.urls)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
B_HeHeB::urls() const {
  // @@protoc_insertion_point(field_list:echo.B.HeHeB.urls)
  return urls_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
B_HeHeB::mutable_urls() {
  // @@protoc_insertion_point(field_mutable_list:echo.B.HeHeB.urls)
  return &urls_;
}

// -------------------------------------------------------------------

// B

// optional int32 b = 1;
inline bool B::has_b() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void B::set_has_b() {
  _has_bits_[0] |= 0x00000001u;
}
inline void B::clear_has_b() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void B::clear_b() {
  b_ = 0;
  clear_has_b();
}
inline ::google::protobuf::int32 B::b() const {
  // @@protoc_insertion_point(field_get:echo.B.b)
  return b_;
}
inline void B::set_b(::google::protobuf::int32 value) {
  set_has_b();
  b_ = value;
  // @@protoc_insertion_point(field_set:echo.B.b)
}

// optional .echo.B.HeHeB hehe_a = 2;
inline bool B::has_hehe_a() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void B::set_has_hehe_a() {
  _has_bits_[0] |= 0x00000002u;
}
inline void B::clear_has_hehe_a() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void B::clear_hehe_a() {
  if (hehe_a_ != NULL) hehe_a_->::echo::B_HeHeB::Clear();
  clear_has_hehe_a();
}
inline const ::echo::B_HeHeB& B::hehe_a() const {
  // @@protoc_insertion_point(field_get:echo.B.hehe_a)
  return hehe_a_ != NULL ? *hehe_a_ : *default_instance_->hehe_a_;
}
inline ::echo::B_HeHeB* B::mutable_hehe_a() {
  set_has_hehe_a();
  if (hehe_a_ == NULL) hehe_a_ = new ::echo::B_HeHeB;
  // @@protoc_insertion_point(field_mutable:echo.B.hehe_a)
  return hehe_a_;
}
inline ::echo::B_HeHeB* B::release_hehe_a() {
  clear_has_hehe_a();
  ::echo::B_HeHeB* temp = hehe_a_;
  hehe_a_ = NULL;
  return temp;
}
inline void B::set_allocated_hehe_a(::echo::B_HeHeB* hehe_a) {
  delete hehe_a_;
  hehe_a_ = hehe_a;
  if (hehe_a) {
    set_has_hehe_a();
  } else {
    clear_has_hehe_a();
  }
  // @@protoc_insertion_point(field_set_allocated:echo.B.hehe_a)
}

// optional string what = 3;
inline bool B::has_what() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void B::set_has_what() {
  _has_bits_[0] |= 0x00000004u;
}
inline void B::clear_has_what() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void B::clear_what() {
  if (what_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    what_->clear();
  }
  clear_has_what();
}
inline const ::std::string& B::what() const {
  // @@protoc_insertion_point(field_get:echo.B.what)
  return *what_;
}
inline void B::set_what(const ::std::string& value) {
  set_has_what();
  if (what_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    what_ = new ::std::string;
  }
  what_->assign(value);
  // @@protoc_insertion_point(field_set:echo.B.what)
}
inline void B::set_what(const char* value) {
  set_has_what();
  if (what_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    what_ = new ::std::string;
  }
  what_->assign(value);
  // @@protoc_insertion_point(field_set_char:echo.B.what)
}
inline void B::set_what(const char* value, size_t size) {
  set_has_what();
  if (what_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    what_ = new ::std::string;
  }
  what_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:echo.B.what)
}
inline ::std::string* B::mutable_what() {
  set_has_what();
  if (what_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    what_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:echo.B.what)
  return what_;
}
inline ::std::string* B::release_what() {
  clear_has_what();
  if (what_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = what_;
    what_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void B::set_allocated_what(::std::string* what) {
  if (what_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete what_;
  }
  if (what) {
    set_has_what();
    what_ = what;
  } else {
    clear_has_what();
    what_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:echo.B.what)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace echo

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_echo_2eproto__INCLUDED
